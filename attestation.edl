// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

enclave {
    include "common/common.h"
    from "openenclave/edl/attestation.edl" import *;
    from "openenclave/edl/syscall.edl" import *;
    from "platform.edl" import *;

    struct format_settings_t
    {
        [size=size] uint8_t* buffer;
        size_t size;
    };

    struct pem_key_t
    {
        [size=size] uint8_t* buffer;
        size_t size;
    };

    struct evidence_t
    {
        [size=size] uint8_t* buffer;
        size_t size;
    };

    struct message_t
    {
        [size=size] uint8_t* data;
        size_t size;
    };

    trusted {

        public int get_enclave_format_settings(
            [in] const oe_uuid_t* format_id,
            [out] format_settings_t* format_settings);

        // Return the public key of this enclave along with the enclave's evidence.
        // Another enclave can use the evidence to attest the enclave and verify
        // the integrity of the public key.
        public int get_evidence_with_public_key(
            [in] const oe_uuid_t* format_id,
            [in] format_settings_t* format_settings,
            [out] pem_key_t *pem_key,
            [out] evidence_t *evidence_buffer);

        // Attest and store the public key of another enclave
        public int verify_evidence_and_set_public_key(
            [in] const oe_uuid_t* format_id,
            [in] pem_key_t *pem_key,
            [in] evidence_t *evidence, 
            [in] pem_key_t *other_enclave_signing_pem_key);

        // Encrypt message for another enclave using the public key stored for it
        public int generate_encrypted_message(
            [out] message_t* message, 
            [in] pem_key_t* other_enclave_pem_key
        );

        // Process encrypted message
        public int process_encrypted_message([in] message_t* message);
        
        public int SetOcallBuffer( 
            [user_check]HotMsg *hotMsg 
        ); 

        public int EnclaveMsgStartResponder( 
            [user_check]HotMsg *hotMsg 
        ); 

    };

    //untrusted {
    //    no untrusted functions in this sample
    //};
};
